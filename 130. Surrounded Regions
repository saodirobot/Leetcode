Description:
Given an m x n matrix board containing 'X' and 'O', capture all regions that are 4-directionally surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.


Algorithm:

Use recursion to run DFS. Starting from edges. So that we can find connected components for all edge 0s.

Code:
class Solution {
    public void solve(char[][] board) {
        //Set<int[]> seen = new HashSet<>();
        
        int row = board.length;
        int column = board[0].length;
        
        for (int i = 0; i < row; i++){
            DFS(board, i, 0);
            DFS(board, i, column-1);
        }
        for (int j = 0; j < column; j++){
            DFS(board, 0, j);
            DFS(board, row-1, j);
        }
        for (int i = 0; i< row; i ++){
            for (int j = 0; j < column; j++){
                if (board[i][j] == 'E'){
                    board[i][j] = 'O';
                }else if (board[i][j] == 'O'){
                    board[i][j] = 'X';
                }
            }
        }
    }
    
    private void DFS(char[][] board, int x, int y){
        int row = board.length;
        int column = board[0].length;
        if (x >= row|| y >= column || x < 0|| y<0){
            return;
        }
        
        if (board[x][y] == 'X'){
            return;
        }else{
            board[x][y] = 'E';
            if (x+1 < row){
                DFS(board, x+1, y);
            }
            if (x-1 >= 0){
                DFS(board, x-1, y);
            }
            if (y+1 < column){
                DFS(board, x, y+1);
            }
            if (y-1 >= 0){
                DFS(board, x, y-1);
            }
            
            
        }
    }
}
