Description:

You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).

We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. 
pickIndex() should return the integer proportional to its weight in the w array. For example, for w = [1, 3], the probability of 
picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).

More formally, the probability of picking index i is w[i] / sum(w).

Algorithm:

Imagine there is a number line that starts at 0 and ends at sum of w. For example. w = {1, 2, 3}. The number line will be
0--1----3------6. Each element will take up a length associated with its proportion. Now we just need to generate a number between 0 and 6. Denote such number by a
if a falls into [0,1) then it will return index 0. In this way, we will ensure the probability is proportional to its weight.

Code:

class Solution {
    private int sum;

    private int[] maxLimit;
    public Solution(int[] w) {

        maxLimit = new int[w.length];
        for (int i = 0; i < w.length; i ++){
            
            sum += w[i];
            maxLimit[i] = sum;
        }
        
        
        
    }
    
    public int pickIndex() {
        double ran = Math.random()*sum;
        
        for (int i = 0; i < this.maxLimit.length; i++){
            if (ran <= maxLimit[i]){
                return i;
            }
        }
        return 1; 
    }
}



Run time: O(n)
