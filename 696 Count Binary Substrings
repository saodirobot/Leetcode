Description:
Give a binary string s, return the number of non-empty substrings that have the same number of 0's and 1's, 
and all the 0's and all the 1's in these substrings are grouped consecutively.

Substrings that occur multiple times are counted the number of times they occur.

Algorithm:
We can convert the string s into an array groups that represents the length of same-character contiguous blocks within the string. 
For example, if s = "110001111000000", then groups = [2, 3, 4, 6].

For every binary string of the form '0' * k + '1' * k or '1' * k + '0' * k, the middle of this string must occur between two groups.

Code:

class Solution {
    public int countBinarySubstrings(String s) {
        int sum = 0, prev = 0, curr = 1;
        for (int i = 1; i < s.length(); i ++){
            if (s.charAt(i) != s.charAt(i-1)){
                sum += Math.min(prev, curr);
                prev = curr;
                curr = 1;
            }else{
                curr ++;
            }
        }
        return sum+= Math.min(prev,curr);
    }
}
