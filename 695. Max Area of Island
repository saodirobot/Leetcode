Description:
You are given an m x n binary matrix grid. An island is a group of 1's 
(representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

The area of an island is the number of cells with a value 1 in the island.

Return the maximum area of an island in grid. If there is no island, return 0.

Algorithm:
use recursion to compute area. Keep an array for visited nodes.

Code:
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        int row = grid.length;
        int column = grid[0].length;
        int maxArea= 0;
        boolean[][] seen = new boolean[row][column];
        for (int i = 0; i < row; i++){
            for (int j = 0; j < column; j++){
                int area = area(i, j, grid, seen);
                if (area > maxArea){
                    maxArea = area;
                }
            }
        }
        return maxArea;
    }
    
    private int area(int r, int c, int[][]grid, boolean[][] seen){
        int row = grid.length;
        int column = grid[0].length;
        if (c >= column || r >= row || c < 0 || r <0|| grid[r][c] == 0 || seen[r][c]){
            return 0;
        }
        seen[r][c] = true;
        return (1+ area(r+1, c,grid, seen)+area(r, c+1,grid, seen)+area(r-1, c,grid, seen)+area(r, c-1,grid, seen)) ;
    }
}

Run time:
O(mn).
