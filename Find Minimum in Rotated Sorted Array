/* Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
*
*[4,5,6,7,0,1,2] if it was rotated 4 times.
*[0,1,2,4,5,6,7] if it was rotated 7 times.
*Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
*
*Given the sorted rotated array nums of unique elements, return the minimum element of this array.
*
*You must write an algorithm that runs in O(log n) time.
*/

Algorithm:

If the array is not rotated and the array is in ascending order, then last element > first element. If the array has been rotated, we have last element < first element. Such as 
[4, 5, 2, 3]. Our goal is to find the inflection point where subarrays before and after this point are sorted. We can use binary search to find such point:

If array[mid] > array[0] then inflection point is at right to the mid
If array[mid] < array[0] then inflection point is at left to the mid

We stop search when the following conditions are met:
if array[mid] > array[mid+1] then mid is the inflection point
if array[mid-1] > array[mid] then mid-1 is the inflection point


Code:

class Solution {
    public int findMin(int[] nums) {
        int len = nums.length;
        if (len == 1 || nums[0] < nums[len-1]) return nums[0];
        
        int left = 0;
        int right = len-1;
        
        while (right > left){
            int mid = (right+ left) / 2 ;
            if (nums[mid] > nums[mid+1]) {return nums[mid+1];}
            if (nums[mid-1] > nums[mid]) {return nums[mid];}
            
            if (nums[left] > nums[mid]){
                right = mid-1;
            }else{
                left = mid +1;
            } 
        }
        
        return -1;
        
    }
}

Run time:

Binary search for inflection point. Total run time is O(lg n).
