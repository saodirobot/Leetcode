Description:

Given an array of integers nums and an integer k, return the total number of continuous subarrays whose sum equals to k.
Example:
Input: nums = [1,1,1], k = 2
Output: 2

Approach 1 - brute force (almost)
Algorithm:
my first thought is to check if there is any duplicated subproblem so that we can use DP. However, it seems like very subproblem is unique.
So I try to use brute force. Because elements could be positive or negative. We have to enumerate till the end of array.

Code:
class Solution {
    public int subarraySum(int[] nums, int k) {
        int len = nums.length;
        if (len == 1){
            if (nums[0] == k){
                return 1;
            }else{
                return 0;
            }
        }
        
        int count = 0;
        for (int i = 0; i < len; i ++){
            int sum = nums[i];
            if (nums[i] == k){count ++;}
            for (int j = i+1; j < len; j++){
                sum += nums[j];
                if (sum == k){
                    count++;
                }
            }
        }
        
        return count;
    }
}

Runtime: O(n^2)

Approach 2 - HashMap
Algorithm:Algorithm

The idea behind this approach is as follows: If the cumulative sum(represented by sum[i]sum[i] for sum up to i^{th}ith index) up to two indices is the same, 
the sum of the elements lying in between those indices is zero. 
 Extending the same thought further, if the cumulative sum up to two indices, say ii and jj is at a difference of kk i.e. if sum[i] - sum[j] = ksum[i]−sum[j]=k, 
 the sum of elements lying between indices ii and jj is kk.
We traverse over the array numsnums and keep on finding the cumulative sum. Every time we encounter a new sum, 
we make a new entry in the hashmap corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. 
Further, for every sum encountered, we also determine the number of times the sum sum-ksum−k has occurred already, since it will determine the number of times 
a subarray with sum kk has occurred up to the current index. We increment the countcount by the same amount.


Code:
class Solution {
    public int subarraySum(int[] nums, int k) {
        int len = nums.length;
        if (len == 1){
            if (nums[0] == k){
                return 1;
            }else{
                return 0;
            }
        }
        
        HashMap<Integer, Integer> sumCount = new HashMap<>();
        sumCount.put(0, 1);
        int count = 0, sum = 0;
        for (int i = 0; i < len; i ++){
            sum += nums[i];
            if (sumCount.containsKey(sum-k)){
                count += sumCount.get(sum-k);
            }
            sumCount.put(sum, sumCount.getOrDefault(sum, 0)+1);
        }
        
        return count;
    }
}
