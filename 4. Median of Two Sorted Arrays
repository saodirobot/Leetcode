Description:
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Algorithm:
Use mergesort to merge them will take O(m+n).
The basic idea here is to partition these two arrays into left and right parts. There are 0,1,2,3,...,m locations where we can divide array1. and 
0,1,2,...,n locations to divide array2. Denote the partition for array1 by i and second partition by j. We want to find such i and j that nums1[i-1]<= nums2[j] &&
nums2[j-1] <= nums1[i] && j+i = (m+n+1)/2. Notice once we choose any i to proceed, partition j is determined. Hence we just need to use binary search to find
correct i and j. If nums1[i-1] > nums2[j] then we need to shift i to the left. Otherwise if nums2[j-1] > nums1[i], we have to shift j towards right. Note that
only one of these two cases can be true at any time. Because  either nums2[j] > nums2[j-1] > nums1[i] > nums1[i-1] or nums1[i] > nums1[i-1]>nums2[j]>nums2[j-1]
can be true.

Code:

public double findMedianSortedArrays(int[] nums1, int[] nums2) {
 int m = nums1.length;
	int n = nums2.length;
	
	if (m > n) {
		return findMedianSortedArrays(nums2, nums1);
	}
	
	int i = 0, j = 0, imin = 0, imax = m, half = (m + n + 1) / 2;
	double maxLeft = 0, minRight = 0;
	while(imin <= imax){
		i = (imin + imax) / 2;
		j = half - i;
		if(j > 0 && i < m && nums2[j - 1] > nums1[i]){
			imin = i + 1;
		}else if(i > 0 && j < n && nums1[i - 1] > nums2[j]){
			imax = i - 1;
		}else{
			if(i == 0){
				maxLeft = (double)nums2[j - 1];
			}else if(j == 0){
				maxLeft = (double)nums1[i - 1];
			}else{
				maxLeft = (double)Math.max(nums1[i - 1], nums2[j - 1]);
			}
			break;
		}
	}
	if((m + n) % 2 == 1){
		return maxLeft;
	}
	if(i == m){
		minRight = (double)nums2[j];
	}else if(j == n){
		minRight = (double)nums1[i];
	}else{
		minRight = (double)Math.min(nums1[i], nums2[j]);
	}
	
	return (double)(maxLeft + minRight) / 2;
}
