Description:
The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of 
nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Algorithm:
Using Stack. 

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Deque<Integer> stack = new LinkedList<>();
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i = 0 ; i < nums2.length; i ++){
            while (!stack.isEmpty() && nums2[i] > stack.peekFirst()){
                map.put(stack.pop(), nums2[i]);
            }
            stack.push(nums2[i]);
        }
        
        while(!stack.isEmpty()){
            map.put(stack.pop(), -1);
        }
        int[] ans = new int[nums1.length];
        for (int i = 0; i< nums1.length; i ++){
            ans[i] = map.get(nums1[i]);
        }
        return ans;
    }
}
