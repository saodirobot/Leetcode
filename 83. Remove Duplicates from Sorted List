/*
*Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
*/

Algorithm:
Use two nodes to traverse the list, find duplicated, remove it. Notice when traversing the list, we have to be caution to move forward when there is duplicates.

code:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head;
        
        ListNode curr = head.next;
        ListNode pre = head;
        while (curr!=null){
            
            if (curr.val == pre.val){
            // caution here, when there is a duplicate, dont move pre forward for caes like [1, 1, 1]
                pre.next = curr.next;
                curr = curr.next;
            }else{
                pre = curr;
                curr= curr.next;
            }
        }
        return head;
        
    }
}

