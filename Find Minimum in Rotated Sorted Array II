/*Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:
*
*[4,5,6,7,0,1,4] if it was rotated 4 times.
*[0,1,4,4,5,6,7] if it was rotated 7 times.
*Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
*
*Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.
*
*You must decrease the overall operation steps as much as possible.
*/

Algorithm:
Comparing to the previous problem, the difficulties lie where case like [3,3,3,3,3,1,3,3] is. We can't really determine where the minimum is located, because 1 could be on 
left or right halves, such like [3,3,3,3,3,1,3,3] and [3,1,3,3,3,3,3,3]. So we need to recursively call the method to find min_left and min_right and
then return min(min_left, min_right).

Code
class Solution {
    public int findMin(int[] nums) {
        int len = nums.length;
        if (len <= 1 || nums[0] < nums[len-1]) return nums[0];
        
        
        int left = 0;
        int right = len-1;
        
        return findMin2 (nums, left, right);
    }
    
    private int findMin2 (int[] nums, int left, int right){
        
        while (right -left > 1){
            int mid = (right + left)/2;
            
            if (nums[mid] > nums[mid+1]) {return nums[mid+1];}
            if (nums[mid-1] > nums[mid]) {return nums[mid];}
            
            if (nums[left] > nums[mid]) {
                right = mid-1;
            }else if (nums[mid] == nums[left]){
                if  (nums[mid] == nums[right]) {
                    int min1 =  findMin2(nums, left, mid-1);
                    int min2 = findMin2(nums, mid+1, right);
                    return Math.min(min1, min2);
                }else{
                    left = mid + 1;
                }
            }else {
                left = mid + 1;
            }
        }
        return Math.min(nums[left], nums[right]);
    }
}

Run time:

The worse case is when we have to recurse everytime. So T(n) = 2xT(n/2). Total runtime is O(nlgn).
