/*Given the head of a singly linked list, reverse the list, and return the reversed list.*/

Algorithm:

Keep two track of list. One node enumerate the original list, the other one create new node and insert into the new list. e.g.
1->2->3->4
we have a node curr represents the current node in original list and a node pre represents the previous node in the new list. While we iterates the list, we keep creating
new node and append it to the new list.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) return head;
        
        ListNode curr = head.next;
        ListNode prev = new ListNode(head.val);
        while (curr != null){
            
            ListNode newNode = new ListNode(curr.val);
            newNode.next = prev;
            prev = newNode;
            curr = curr.next;
        }
        
        return prev;
        
        
    }
}

